name: Package

on:
  release:
    types: [ created ]

jobs:
  # Debian package for ubuntu.
  ubuntu:
    strategy:
      matrix:
        component: [ cli, gui ]
        include:
          - component: cli
            build-opts: --cli --no-gui -t Release --pkg-type deb
          - component: gui
            build-opts: --no-cli --gui -t Release --pkg-type deb
    name: ${{matrix.os}} (${{matrix.component}})
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1

      - name: Qt
        if: startsWith(matrix.component, 'gui')
        shell: bash
        run: sudo apt-get install qt5-default=5.9.5+dfsg-0ubuntu2.5

      - name: Package
        id: package
        run: |
            ./build.sh ${{matrix.build-opts}}
            FILE=$(ls build/eosio-*.deb | head -1)
            echo "::set-output name=filename::$FILE"
            echo "::set-output name=name::$(basename $FILE)"

      - name: Upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_name: ${{ steps.package.outputs.name }}
          asset_path: ${{ steps.package.outputs.filename }}
          asset_content_type: application/x-deb

  # Windows installer
  windows:
    strategy:
      matrix:
        arch: [ Win32, x64 ]
        include:
          - arch: Win32
            qt-arch: win32_msvc2015
          - arch: x64
            qt-arch: win64_msvc2015_64
    name: Windows (${{matrix.arch}})
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1

      - name: Qt
        uses: jurplel/install-qt-action@v2
        with:
          arch: ${{ matrix.qt-arch }}
          version: '5.11.0'

      - name: Configure
        run: cmake -A ${{matrix.arch}} -DCOMPONENT_GUI=ON -DCOMPONENT_CLI=ON -D CMAKE_BUILD_TYPE=Release -D CPACK_GENERATOR=NSIS -S . -B build

      - name: Package
        id: package
        run: |
          cmake --build build --config Release --target package
          $FILE=(ls build/*.exe)
          echo "::set-output name=filename::$FILE"
          echo "::set-output name=name::$(([io.fileinfo]"$FILE").basename).exe"

      - name: Upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_name: ${{ steps.package.outputs.name }}
          asset_path: ${{ steps.package.outputs.filename }}
          asset_content_type: application/vnd.microsoft.portable-executable
